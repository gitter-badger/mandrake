{"shell":true,"revision":"179a9f06315c52c434cefca6f78f0e43107cc23b","objects":[{"type":null,"source":"lib/mandrake.ex:3","object_type":"ModuleObject","moduledoc":"Mandrake is a functional programming library that bring something else magic in elixir. Facility, prosperity and maintainability are Mandrake characteristics. Mandrake contains mathematical, logical, relational and functional API that helps developers in their daily work.\n\n## What is a Mandrake?\n\nElement: Fire\n\nPlanet: Mercury, Uranus and Pluto.\n\nPowers: Protection, Fertility, Money, Love, Health\n\nMandrake is a long leafed dark green plant with small greenish-yellow or purple bell-shaped flowers. The flowers eventually fruit into small orange-coloured fleshy berries.\nMagically speaking, the female mandrake carries forked that look like a pair of human legs, whereas the male has only a single root.\nIn the old Herbals we find them frequently figured as a male with a long beard, and a female with a very bushy head of hair.\nThe female form is the most sought after for magic and medicinal use.\nA whole Mandrake root placed in the home, will give the house protection, fertility, and prosperity. Also, where there is Mandrake, demons cannot abide. Money placed beside the root is said to multiply.\n\nSource: http://monsters.monstrous.com/mandrake.htm\n\n","module":"Elixir.Mandrake","id":"Mandrake"},{"type":null,"source":"lib/mandrake.ex:1147","object_type":"ModuleObject","moduledoc":"Mandrake annotations.\n\n","module":"Elixir.Mandrake.Annotation","id":"Mandrake.Annotation"},{"type":null,"source":"lib/mandrake.ex:1231","object_type":"ModuleObject","moduledoc":"Mandrake functions for date and time.\n\n","module":"Elixir.Mandrake.DateTime","id":"Mandrake.DateTime"},{"type":"exception","source":"lib/mandrake.ex:1505","object_type":"ModuleObject","moduledoc":"Error to notify that a deprecation must be deleted.\n\n","module":"Elixir.Mandrake.DeprecationError","id":"Mandrake.DeprecationError"},{"type":"exception","source":"lib/mandrake.ex:1518","object_type":"ModuleObject","moduledoc":"Error to notify that documentation must be written.\n\n","module":"Elixir.Mandrake.DocumentationNeededError","id":"Mandrake.DocumentationNeededError"},{"type":"exception","source":"lib/mandrake.ex:1544","object_type":"ModuleObject","moduledoc":"Error to notify that a fix is needed.\n\n","module":"Elixir.Mandrake.FixNeededError","id":"Mandrake.FixNeededError"},{"type":null,"source":"lib/mandrake.ex:313","object_type":"ModuleObject","moduledoc":"Mandrake functional functions.\n\n","module":"Elixir.Mandrake.Function","id":"Mandrake.Function"},{"type":null,"source":"lib/mandrake.ex:512","object_type":"ModuleObject","moduledoc":"Mandrake mathematical functions.\n\n","module":"Elixir.Mandrake.List","id":"Mandrake.List"},{"type":null,"source":"lib/mandrake.ex:376","object_type":"ModuleObject","moduledoc":"Mandrake logical functions.\n\n","module":"Elixir.Mandrake.Logic","id":"Mandrake.Logic"},{"type":null,"source":"lib/mandrake.ex:26","object_type":"ModuleObject","moduledoc":"Mandrake mathematical functions.\n\n","module":"Elixir.Mandrake.Math","id":"Mandrake.Math"},{"type":"exception","source":"lib/mandrake.ex:1531","object_type":"ModuleObject","moduledoc":"Error to notify that a redundancy must be fixed.\n\n","module":"Elixir.Mandrake.RedundancyError","id":"Mandrake.RedundancyError"},{"type":null,"source":"lib/mandrake.ex:867","object_type":"ModuleObject","moduledoc":"Mandrake relational functions.\n\n","module":"Elixir.Mandrake.Relation","id":"Mandrake.Relation"},{"type":"exception","source":"lib/mandrake.ex:1492","object_type":"ModuleObject","moduledoc":"Error to notify that a TODO must be fixed.\n\n","module":"Elixir.Mandrake.TodoError","id":"Mandrake.TodoError"},{"type":null,"source":"lib/mandrake.ex:928","object_type":"ModuleObject","moduledoc":"Mandrake functions for types.\n\n","module":"Elixir.Mandrake.Type","id":"Mandrake.Type"},{"type":"def","source":"lib/mandrake.ex:1167","signature":[["date_time",[],null],["description",[],null]],"object_type":"FunctionObject","name":"deprecation","module_id":"Mandrake.Annotation","id":"deprecation/2","doc":"Raise an exception if time to remove deprecation is over.\n\n## Examples\n\n    iex>  Mandrake.Annotation.deprecation({{2015, 12, 31}, {0, 0, 0}}, \"Code refactoring needed\")\n    nil\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1182","signature":[["date_time",[],null],["description",[],null]],"object_type":"FunctionObject","name":"documentation","module_id":"Mandrake.Annotation","id":"documentation/2","doc":"Raise an exception if time to write documentation is over.\n\n## Examples\n\n    iex>  Mandrake.Annotation.documentation({{2015, 12, 31}, {0, 0, 0}}, \"Write documentation for Math module\")\n    nil\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1212","signature":[["date_time",[],null],["description",[],null]],"object_type":"FunctionObject","name":"fix","module_id":"Mandrake.Annotation","id":"fix/2","doc":"Raise an exception if time to fix an issue is over.\n\n## Examples\n\n    iex>  Mandrake.Annotation.fix({{2015, 12, 31}, {0, 0, 0}}, \"Fix issue in 'sum' function\")\n    nil\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1197","signature":[["date_time",[],null],["description",[],null]],"object_type":"FunctionObject","name":"redundancy","module_id":"Mandrake.Annotation","id":"redundancy/2","doc":"Raise an exception if time to fix redundancy is over.\n\n## Examples\n\n    iex>  Mandrake.Annotation.redundancy({{2015, 12, 31}, {0, 0, 0}}, \"Fix redundancy\")\n    nil\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1152","signature":[["date_time",[],null],["description",[],null]],"object_type":"FunctionObject","name":"todo","module_id":"Mandrake.Annotation","id":"todo/2","doc":"Raise an exception if time for todo is over.\n\n## Examples\n\n    iex>  Mandrake.Annotation.todo({{2015, 12, 31}, {0, 0, 0}}, \"Must implement 'sum' function\")\n    nil\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1459","signature":[["time",[],null]],"object_type":"FunctionObject","name":"add_date","module_id":"Mandrake.DateTime","id":"add_date/1","doc":"Add date to time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.add_date({15, 34, 18})\n    {{2015, 11, 29}, {15, 34, 18}}\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1472","signature":[["date",[],null]],"object_type":"FunctionObject","name":"add_time","module_id":"Mandrake.DateTime","id":"add_time/1","doc":"Add time to date.\n\n## Examples\n\n    iex>  Mandrake.DateTime.add_time({2015, 11, 29})\n    {{2015, 11, 29}, {0, 0, 0}}\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1261","signature":[["arg",[],"Elixir"],["divider",[],null]],"object_type":"FunctionObject","name":"dd_mm_yyyy","module_id":"Mandrake.DateTime","id":"dd_mm_yyyy/2","doc":"Format date to dd mm yyyy with the given divider.\n\n## Examples\n\n    iex>  Mandrake.DateTime.dd_mm_yyyy({2015,12,31}, \"/\")\n    \"31/12/2015\"\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1381","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"extract_date","module_id":"Mandrake.DateTime","id":"extract_date/1","doc":"Extract date to date_time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.extract_date({{2015, 11, 29}, {15, 34, 18}})\n    {2015, 11, 29}\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1394","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"extract_time","module_id":"Mandrake.DateTime","id":"extract_time/1","doc":"Extract time to date_time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.extract_time({{2015, 11, 29}, {15, 34, 18}})\n    {15, 34, 18}\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1257","signature":[["divider",[],null]],"object_type":"FunctionObject","name":"format","module_id":"Mandrake.DateTime","id":"format/1","doc":"Returns a function for date or time formatting.\n\n## Examples\n\n    iex>  formatWithSlash = Mandrake.DateTime.format(\"/\")\n    ...>  formatWithSlash.({{2015,12,31}, {10,30,15}})\n    \"2015/12/31 10:30:15\"\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1236","signature":[["arg",[],"Elixir"],["divider",[],null]],"object_type":"FunctionObject","name":"format","module_id":"Mandrake.DateTime","id":"format/2","doc":"Format date, time or date_time with the given divider.\n\n## Examples\n\n    iex>  Mandrake.DateTime.format({{2015,12,31}, {10,30,15}}, \"/\")\n    \"2015/12/31 10:30:15\"\n    iex>  Mandrake.DateTime.format({2015,12,31}, \"/\")\n    \"2015/12/31\"\n    iex>  Mandrake.DateTime.format({10,30,15})\n    \"10:30:15\"\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1288","signature":[["pattern",[],null],["list",[],null]],"object_type":"FunctionObject","name":"format_date_time","module_id":"Mandrake.DateTime","id":"format_date_time/2","doc":"Format date/time with the given pattern and list using :io_lib.format.\n\n## Examples\n\n    iex>  Mandrake.DateTime.format_date_time(\"~2..0B:~2..0B:~2..0B\", [10 ,30 ,15 ])\n    \"10:30:15\"\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1303","signature":[],"object_type":"FunctionObject","name":"get","module_id":"Mandrake.DateTime","id":"get/0","doc":"Get current date and time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get()\n    {{2015, 11, 29}, {15, 34, 18}}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1329","signature":[],"object_type":"FunctionObject","name":"get_date","module_id":"Mandrake.DateTime","id":"get_date/0","doc":"Get current date.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get_date()\n    {2015, 11, 29}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1316","signature":[],"object_type":"FunctionObject","name":"get_local","module_id":"Mandrake.DateTime","id":"get_local/0","doc":"Get current local date and time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get_local()\n    {{2015, 11, 29}, {15, 34, 18}}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1342","signature":[],"object_type":"FunctionObject","name":"get_local_date","module_id":"Mandrake.DateTime","id":"get_local_date/0","doc":"Get current local date.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get_local_date()\n    {2015, 11, 29}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1368","signature":[],"object_type":"FunctionObject","name":"get_local_time","module_id":"Mandrake.DateTime","id":"get_local_time/0","doc":"Get current local time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get_local_time()\n    {15, 34, 18}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1355","signature":[],"object_type":"FunctionObject","name":"get_time","module_id":"Mandrake.DateTime","id":"get_time/0","doc":"Get current time.\n\n## Examples\n\n    iex>  Mandrake.DateTime.get_time()\n    {15, 34, 18}\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:1446","signature":[["date_1",[],null],["date_2",[],null]],"object_type":"FunctionObject","name":"is_future","module_id":"Mandrake.DateTime","id":"is_future/2","doc":"Returns true if first date_time is < than second.\n\n## Examples\n\n    iex>  Mandrake.DateTime.is_future({{2015, 11, 29}, {15, 34, 18}}, {{2015, 11, 28}, {15, 34, 18}})\n    false\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1433","signature":[["date_1",[],null],["date_2",[],null]],"object_type":"FunctionObject","name":"is_past","module_id":"Mandrake.DateTime","id":"is_past/2","doc":"Returns true if first date_time is > than second.\n\n## Examples\n\n    iex>  Mandrake.DateTime.is_past({{2015, 11, 29}, {15, 34, 18}}, {{2015, 11, 28}, {15, 34, 18}})\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1407","signature":[["date_1",[],null],["date_2",[],null]],"object_type":"FunctionObject","name":"offset","module_id":"Mandrake.DateTime","id":"offset/2","doc":"Returns the difference in seconds beetween two date_time elements (date_2 - date_1).\n\n## Examples\n\n    iex>  Mandrake.DateTime.offset({{2015, 11, 29}, {15, 34, 18}}, {{2015, 11, 30}, {15, 34, 18}})\n    86400\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1420","signature":[["seconds",[],null]],"object_type":"FunctionObject","name":"seconds_to_date_time","module_id":"Mandrake.DateTime","id":"seconds_to_date_time/1","doc":"Returns days and time correspondig given seconds.\n\n## Examples\n\n    iex>  Mandrake.DateTime.seconds_to_date_time(86400)\n    {1, {0, 0, 0}}\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1510","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.DeprecationError","id":"exception/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1512","signature":[["date",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.DeprecationError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/mandrake.ex:1510","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Mandrake.DeprecationError","id":"message/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1523","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.DocumentationNeededError","id":"exception/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1525","signature":[["date",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.DocumentationNeededError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/mandrake.ex:1523","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Mandrake.DocumentationNeededError","id":"message/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1549","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.FixNeededError","id":"exception/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1551","signature":[["date",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.FixNeededError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/mandrake.ex:1549","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Mandrake.FixNeededError","id":"message/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:331","signature":[["value",[],null]],"object_type":"FunctionObject","name":"always","module_id":"Mandrake.Function","id":"always/1","doc":"Function that return always the given value.\n\n## Examples\n\n    iex>  printExample = Mandrake.Function.always(\"Example\")\n    ...>  printExample.()\n    \"Example\"\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:358","signature":[["first_function",[],null],["second_function",[],null]],"object_type":"FunctionObject","name":"compose","module_id":"Mandrake.Function","id":"compose/2","doc":"Returns the composition of two functions.\n\n## Examples\n\n    iex>  printHello = Mandrake.Function.compose(fn x -> \"Hello \" <> to_string(x) end, fn y -> y + 1 end)\n    ...>  printHello.(6)\n    \"Hello 7\"\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:345","signature":[],"object_type":"FunctionObject","name":"noop","module_id":"Mandrake.Function","id":"noop/0","doc":"Function that do nothing\n\n## Examples\n\n    iex>  Mandrake.Function.noop()\n    nil\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:318","signature":[["function",[],null],["value",[],null]],"object_type":"FunctionObject","name":"tap","module_id":"Mandrake.Function","id":"tap/2","doc":"Call the given function with the given object.\n\n## Examples\n\n    iex>  Mandrake.Function.tap(fn arg -> Mandrake.Math.inc(arg) end, 5)\n    6\n    \n","arity":2},{"type":"def","source":"lib/mandrake.ex:517","signature":[["element",[],null],["list",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Mandrake.List","id":"append/2","doc":"Returns a new list after appending the new element.\n\n## Examples\n\n    iex>  Mandrake.List.append(45, [4, 7, 43, 6, 3, 7])\n    [4, 7, 43, 6, 3, 7, 45]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:543","signature":[["function",[],null]],"object_type":"FunctionObject","name":"best","module_id":"Mandrake.List","id":"best/1","doc":"Returns the best item in a list based on the return value for the iterator function.\n\n## Examples\n\n    iex>  longest = Mandrake.List.best(fn arg1, arg2 -> if arg1 > arg2 do arg1 else arg2 end end)\n    ...>  longest.([4, 7, 43, 6, 3, 7])\n    43\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:557","signature":[["function",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"best","module_id":"Mandrake.List","id":"best/2","doc":"Returns the best item in a list based on the return value for the iterator function.\n\n## Examples\n\n    iex>  Mandrake.List.best(fn arg1, arg2 -> if arg1 > arg2 do arg1 else arg2 end end, [4, 7, 43, 6, 3, 7])\n    43\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:574","signature":[["value",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"contains","module_id":"Mandrake.List","id":"contains/2","doc":"Returns true if list contains the given value.\n\n## Examples\n\n    iex>  Mandrake.List.contains(3, [1, 2, 3, 4, 5])\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:699","signature":[["item",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Mandrake.List","id":"delete/1","doc":"Returns a new list without the given item.\n\n## Examples\n\n    iex>  delete_4 = Mandrake.List.delete(4)\n    ...>  delete_4.([1, 2, 4, 3, 4, 5, 6])\n    [1, 2, 3, 5, 6]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:678","signature":[["list",[],"Elixir"],["item",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Mandrake.List","id":"delete/2","doc":"Returns a new list without the given item.\n\n## Examples\n\n    iex>  Mandrake.List.delete([1, 2, 4, 3, 4, 5, 6], 4)\n    [1, 2, 3, 5, 6]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:604","signature":[["first_list",[],null],["second_list",[],null]],"object_type":"FunctionObject","name":"difference","module_id":"Mandrake.List","id":"difference/2","doc":"Returns the difference of the 2 lists.\n\n## Examples\n\n    iex>  Mandrake.List.difference([1, 2, 3], [2])\n    [1, 3]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:644","signature":[["func",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"first","module_id":"Mandrake.List","id":"first/2","doc":"Returns the first item of a list that returns true for the function.\n\n## Examples\n\n    iex>  printHello = Mandrake.List.first(fn x -> Kernel.rem(x, 2) == 0 end, [2, 4, 5, 7])\n    2\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:749","signature":[["function",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"for_each","module_id":"Mandrake.List","id":"for_each/2","doc":"Returns a new list after applying the given function to each element of the list.\n\n## Examples\n\n    iex>  Mandrake.List.for_each(fn x -> x + 1 end, [1, 2, 3])\n    [2, 3, 4]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:617","signature":[["first_list",[],null],["second_list",[],null]],"object_type":"FunctionObject","name":"intersection","module_id":"Mandrake.List","id":"intersection/2","doc":"Returns the intersection of the 2 lists.\n\n## Examples\n\n    iex>  Mandrake.List.intersection([1,2,3,4], [7,6,5,4,3])\n    [3, 4]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:630","signature":[["func",[],null],["list",[],null]],"object_type":"FunctionObject","name":"last","module_id":"Mandrake.List","id":"last/2","doc":"Returns the last item of a list that returns true for the function.\n\n## Examples\n\n    iex>  Mandrake.List.last(fn x -> Kernel.rem(x, 2) == 0 end, [2, 4, 5, 7, 8, 9])\n    8\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:665","signature":[["value",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Mandrake.List","id":"of/1","doc":"Returns a list containing the given value.\n\n## Examples\n\n    iex>  Mandrake.List.of(\"Example\")\n    [\"Example\"]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:836","signature":[["function",[],null]],"object_type":"FunctionObject","name":"partition","module_id":"Mandrake.List","id":"partition/1","doc":"Returns a list of 2 lists. The first contains the elements that satisfy the function, other elements are in the second.\n\n## Examples\n\n    iex>  even = Mandrake.List.partition(fn item -> Kernel.rem(item, 2) == 0 end)\n    ...>  even.([4, 7, 43, 6, 3, 7])\n    [[4, 6], [7, 43, 3, 7]]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:850","signature":[["function",[],null],["list",[],null]],"object_type":"FunctionObject","name":"partition","module_id":"Mandrake.List","id":"partition/2","doc":"Returns a list of 2 lists. The first contains the elements that satisfy the function, other elements are in the second.\n\n## Examples\n\n    iex>  Mandrake.List.partition(fn item -> Kernel.rem(item, 2) == 0 end, [4, 7, 43, 6, 3, 7])\n    [[4, 6], [7, 43, 3, 7]]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:713","signature":[["key",[],null]],"object_type":"FunctionObject","name":"pluck","module_id":"Mandrake.List","id":"pluck/1","doc":"Returns a list composed by the value of the properties for the given key from items in the given list.\n\n## Examples\n\n    iex>  pluck_example = Mandrake.List.pluck(:example)\n    ...>  pluck_example.([%{ name: \"Doe\" }, %{ example: \"first\", name: \"John\" }, %{ example: \"second\" }])\n    [ \"first\", \"second\" ]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:727","signature":[["list",[],"Elixir"],["key",[],null]],"object_type":"FunctionObject","name":"pluck","module_id":"Mandrake.List","id":"pluck/2","doc":"Returns a list composed by the value of the properties for the given key from items in the given list.\n\n## Examples\n\n    iex>  Mandrake.List.pluck([%{ name: \"Doe\" }, %{ example: \"first\", name: \"John\" }, %{ example: \"second\" }], :example)\n    [ \"first\", \"second\" ]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:530","signature":[["element",[],null],["list",[],null]],"object_type":"FunctionObject","name":"prepend","module_id":"Mandrake.List","id":"prepend/2","doc":"Returns a new list after prepending the new element.\n\n## Examples\n\n    iex>  Mandrake.List.prepend(45, [4, 7, 43, 6, 3, 7])\n    [45, 4, 7, 43, 6, 3, 7]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:801","signature":[["function",[],null]],"object_type":"FunctionObject","name":"select","module_id":"Mandrake.List","id":"select/1","doc":"Returns a new list with the only item that satisfy the given function.\n\n## Examples\n\n    iex>  select_even = Mandrake.List.select(fn item -> Kernel.rem(item, 2) == 0 end)\n    ...>  select_even.([2, 6, 7, 8, 10])\n    [2, 6, 8, 10]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:815","signature":[["function",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"select","module_id":"Mandrake.List","id":"select/2","doc":"Returns the list of items that satisfy the condition.\n\n## Examples\n\n    iex>  Mandrake.List.select(fn item -> Kernel.rem(item, 2) == 0 end, [2, 6, 7, 8, 10])\n    [2, 6, 8, 10]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:591","signature":[["first_list",[],null],["second_list",[],null]],"object_type":"FunctionObject","name":"union","module_id":"Mandrake.List","id":"union/2","doc":"Returns the extension of the first list with the second.\n\n## Examples\n\n    iex>  Mandrake.List.union([1, 2, 3], [4, 5])\n    [1, 2, 3, 4, 5]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:766","signature":[["function",[],null]],"object_type":"FunctionObject","name":"while","module_id":"Mandrake.List","id":"while/1","doc":"Returns a list of items until the condition is true.\n\n## Examples\n\n    iex>  while_even = Mandrake.List.while(fn item -> Kernel.rem(item, 2) == 0 end)\n    ...>  while_even.([2, 6, 7, 8, 10])\n    [2, 6]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:780","signature":[["function",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"while","module_id":"Mandrake.List","id":"while/2","doc":"Returns a list of items until the condition is true.\n\n## Examples\n\n    iex>  Mandrake.List.while(fn item -> Kernel.rem(item, 2) == 0 end, [2, 6, 7, 8, 10])\n    [2, 6]\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:396","signature":[["first_func",[],null],["second_func",[],null]],"object_type":"FunctionObject","name":"both","module_id":"Mandrake.Logic","id":"both/2","doc":"Returns true if both functions return true\n\n## Examples\n\n    iex>  my_function = Mandrake.Logic.both(fn x -> x > 10 end, fn x -> Kernel.rem(x, 2) == 0 end)\n    ...>  my_function.(100)\n    true\n    iex>  my_function.(101)\n    false\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:486","signature":[["value",[],null]],"object_type":"FunctionObject","name":"default_to","module_id":"Mandrake.Logic","id":"default_to/1","doc":"Returns the second argument if it is not nil.\n\n## Examples\n\n    iex>  default_to_7 = Mandrake.Logic.default_to(7)\n    ...>  default_to_7.(nil)\n    7\n    iex>  default_to_7.(12)\n    12\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:412","signature":[["first_func",[],null],["second_func",[],null]],"object_type":"FunctionObject","name":"either","module_id":"Mandrake.Logic","id":"either/2","doc":"Returns true if one function return true\n\n## Examples\n\n    iex>  my_function = Mandrake.Logic.either(fn x -> x > 10 end, fn x -> Kernel.rem(x, 2) == 0 end)\n    ...>  my_function.(100)\n    true\n    iex>  my_function.(101)\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:381","signature":[["condition",[],null],["onTrue",[],null],["onFalse",[],null]],"object_type":"FunctionObject","name":"ifElse","module_id":"Mandrake.Logic","id":"ifElse/3","doc":"Returns a function that process onTrue or onFalse depending upon the result of the condition.\n\n## Examples\n\n    iex>  my_number = 1\n    ...>  my_function = Mandrake.Logic.ifElse(my_number <= 1, fn arg -> Mandrake.Math.inc(arg) end, fn arg -> Mandrake.Math.dec(arg) end)\n    ...>  my_function.(my_number)\n    2\n\n","arity":3},{"type":"def","source":"lib/mandrake.ex:428","signature":[["value",[],null]],"object_type":"FunctionObject","name":"is_empty","module_id":"Mandrake.Logic","id":"is_empty/1","doc":"Returns true if value is \"\", '', [], {} or %{}.\n\n## Examples\n\n    iex>  Mandrake.Logic.is_empty([])\n    true\n    iex>  Mandrake.Logic.is_empty(nil)\n    false\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:447","signature":[["first_cond",[],null],["second_cond",[],null]],"object_type":"FunctionObject","name":"logic_and","module_id":"Mandrake.Logic","id":"logic_and/2","doc":"Returns true if both conditions are true.\n\n## Examples\n\n    iex>  Mandrake.Logic.logic_and(1<2, 3>4)\n    false\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:473","signature":[["value",[],null]],"object_type":"FunctionObject","name":"logic_not","module_id":"Mandrake.Logic","id":"logic_not/1","doc":"Returns ! of value\n\n## Examples\n\n    iex>  Mandrake.Logic.logic_not(false)\n    true\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:460","signature":[["first_cond",[],null],["second_cond",[],null]],"object_type":"FunctionObject","name":"logic_or","module_id":"Mandrake.Logic","id":"logic_or/2","doc":"Returns true if one condition is true.\n\n## Examples\n\n    iex>  Mandrake.Logic.logic_or(1<2, 3>4)\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:78","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"abs","module_id":"Mandrake.Math","id":"abs/1","doc":"Calculates the absolute value of each number in a list.\n\n## Examples\n\n    iex>  Mandrake.Math.abs([-1, 2, -3, -4, -5])\n    [1, 2, 3, 4, 5]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:142","signature":[["number",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Mandrake.Math","id":"add/1","doc":"Returns a function that adds a number to the first.\n\n## Examples\n\n    iex>  add2 = Mandrake.Math.add(2)\n    ...>  add2.(5)\n    7\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:129","signature":[["first_number",[],null],["second_number",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Mandrake.Math","id":"add/2","doc":"Adds two numbers.\n\n## Examples\n\n    iex>  Mandrake.Math.add(5, 2)\n    7\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:183","signature":[["number",[],null]],"object_type":"FunctionObject","name":"dec","module_id":"Mandrake.Math","id":"dec/1","doc":"Decrease a number by 1.\n\n## Examples\n\n    iex>  Mandrake.Math.dec(7)\n    6\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:222","signature":[["number",[],null]],"object_type":"FunctionObject","name":"divide","module_id":"Mandrake.Math","id":"divide/1","doc":"Returns a function that divides a number to the first.\n\n## Examples\n\n    iex>  divide2 = Mandrake.Math.divide(2)\n    ...>  divide2.(5)\n    0.4\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:209","signature":[["first_number",[],null],["second_number",[],null]],"object_type":"FunctionObject","name":"divide","module_id":"Mandrake.Math","id":"divide/2","doc":"Divides two numbers.\n\n## Examples\n\n    iex>  Mandrake.Math.divide(5, 2)\n    2.5\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:196","signature":[["number",[],null]],"object_type":"FunctionObject","name":"inc","module_id":"Mandrake.Math","id":"inc/1","doc":"Increase a number by 1.\n\n## Examples\n\n    iex>  Mandrake.Math.inc(7)\n    8\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:95","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"max","module_id":"Mandrake.Math","id":"max/1","doc":"Returns max value in a list.\n\n## Examples\n\n    iex>  Mandrake.Math.max([1, 243, 3, 4, 5])\n    243\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:48","signature":[["list",[],null]],"object_type":"FunctionObject","name":"mean","module_id":"Mandrake.Math","id":"mean/1","doc":"Calculates the mean of a list of numbers.\n\n## Examples\n\n    iex> Mandrake.Math.mean([1, 2, 3, 4, 5])\n    3.0\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:289","signature":[["list",[],null]],"object_type":"FunctionObject","name":"median","module_id":"Mandrake.Math","id":"median/1","doc":"Calculates the median of a list of numbers.\n\n## Examples\n\n    iex> Mandrake.Math.median([7, 2, 10, 9, 6])\n    7\n    iex> Mandrake.Math.median([7, 2, 10, 9, 6, 8])\n    7.5\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:112","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"min","module_id":"Mandrake.Math","id":"min/1","doc":"Returns min value in a list.\n\n## Examples\n\n    iex>  Mandrake.Math.min([1, 243, 3, 4, 5])\n    1\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:263","signature":[["first_number",[],null],["second_number",[],null]],"object_type":"FunctionObject","name":"modulo","module_id":"Mandrake.Math","id":"modulo/2","doc":"Returns modulus of two numbers.\n\n## Examples\n\n    iex>  Mandrake.Math.modulo(20, 5)\n    0\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:249","signature":[["number",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Mandrake.Math","id":"multiply/1","doc":"Returns a function that multiplies a number to the first.\n\n## Examples\n\n    iex>  multiply2 = Mandrake.Math.multiply(2)\n    ...>  multiply2.(5)\n    10\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:236","signature":[["first_number",[],null],["second_number",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Mandrake.Math","id":"multiply/2","doc":"Multiplies two numbers.\n\n## Examples\n\n    iex>  Mandrake.Math.multiply(5, 2)\n    10\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:276","signature":[["number",[],null]],"object_type":"FunctionObject","name":"negate","module_id":"Mandrake.Math","id":"negate/1","doc":"Negate a number.\n\n## Examples\n\n    iex>  Mandrake.Math.negate(7)\n    -7\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:61","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"product","module_id":"Mandrake.Math","id":"product/1","doc":"Calculates the product of a list of numbers.\n\n## Examples\n\n    iex> Mandrake.Math.product([1, 2, 3, 4, 5])\n    120\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:169","signature":[["number",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Mandrake.Math","id":"subtract/1","doc":"Returns a function that subtracts a number to the first.\n\n## Examples\n\n    iex>  subtract2 = Mandrake.Math.subtract(2)\n    ...>  subtract2.(5)\n    -3\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:156","signature":[["first_number",[],null],["second_number",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Mandrake.Math","id":"subtract/2","doc":"Subtracts two numbers.\n\n## Examples\n\n    iex>  Mandrake.Math.subtract(5, 2)\n    3\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:31","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"sum","module_id":"Mandrake.Math","id":"sum/1","doc":"Calculates the sum of a list of numbers.\n\n## Examples\n\n    iex> Mandrake.Math.sum([1, 2, 3, 4, 5])\n    15\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1536","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.RedundancyError","id":"exception/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1538","signature":[["date",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.RedundancyError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/mandrake.ex:1536","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Mandrake.RedundancyError","id":"message/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:898","signature":[["first_value",[],null],["second_value",[],null]],"object_type":"FunctionObject","name":"gt","module_id":"Mandrake.Relation","id":"gt/2","doc":"Returns true if first value is greater than the second.\n\n## Examples\n\n    iex>  Mandrake.Relation.gt(7, 5)\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:911","signature":[["first_value",[],null],["second_value",[],null]],"object_type":"FunctionObject","name":"gte","module_id":"Mandrake.Relation","id":"gte/2","doc":"Returns true if first value is greater than or equal to the second.\n\n## Examples\n\n    iex>  Mandrake.Relation.gte(7, 7)\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:872","signature":[["first_value",[],null],["second_value",[],null]],"object_type":"FunctionObject","name":"lt","module_id":"Mandrake.Relation","id":"lt/2","doc":"Returns true if first value is less than the second.\n\n## Examples\n\n    iex>  Mandrake.Relation.lt(7, 5)\n    false\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:885","signature":[["first_value",[],null],["second_value",[],null]],"object_type":"FunctionObject","name":"lte","module_id":"Mandrake.Relation","id":"lte/2","doc":"Returns true if first value is less than or equal to the second.\n\n## Examples\n\n    iex>  Mandrake.Relation.lte(7, 7)\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1497","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.TodoError","id":"exception/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:1499","signature":[["date",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Mandrake.TodoError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/mandrake.ex:1497","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Mandrake.TodoError","id":"message/1","doc":false,"arity":1},{"type":"def","source":"lib/mandrake.ex:933","signature":[["first_tuple",[],null],["second_tuple",[],null]],"object_type":"FunctionObject","name":"assign","module_id":"Mandrake.Type","id":"assign/2","doc":"Returns the extension of the tuple with the second.\n\n## Examples\n\n    iex>  Mandrake.Type.assign({ \"prop1\", \"prop2\" }, { \"prop3\" })\n    { \"prop1\", \"prop2\", \"prop3\" }\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:972","signature":[],"object_type":"FunctionObject","name":"bool_false","module_id":"Mandrake.Type","id":"bool_false/0","doc":"Always return false.\n\n## Examples\n\n    iex>  Mandrake.Type.bool_false()\n    false\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:959","signature":[],"object_type":"FunctionObject","name":"bool_true","module_id":"Mandrake.Type","id":"bool_true/0","doc":"Always return true.\n\n## Examples\n\n    iex>  Mandrake.Type.bool_true()\n    true\n\n","arity":0},{"type":"def","source":"lib/mandrake.ex:946","signature":[["object",[],null]],"object_type":"FunctionObject","name":"clone","module_id":"Mandrake.Type","id":"clone/1","doc":"Create a copy of a value.\n\n## Examples\n\n    iex>  Mandrake.Type.clone([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1098","signature":[["value",[],null]],"object_type":"FunctionObject","name":"exists","module_id":"Mandrake.Type","id":"exists/1","doc":"Returns true if value is not nil.\n\n## Examples\n\n    iex>  Mandrake.Type.exists(\"Example\")\n    true\n    iex>  Mandrake.Type.exists(nil)\n    false\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1128","signature":[["value",[],null]],"object_type":"FunctionObject","name":"falsy","module_id":"Mandrake.Type","id":"falsy/1","doc":"Returns true if value is nil or false.\n\n## Examples\n\n    iex>  Mandrake.Type.falsy(\"Example\")\n    false\n    iex>  Mandrake.Type.falsy(nil)\n    true\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:985","signature":[["value",[],null]],"object_type":"FunctionObject","name":"is_nil","module_id":"Mandrake.Type","id":"is_nil/1","doc":"Returns true if value is nil.\n\n## Examples\n\n    iex>  Mandrake.Type.is_nil([])\n    false\n    iex>  Mandrake.Type.is_nil(nil)\n    true\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1084","signature":[["pattern",[],null]],"object_type":"FunctionObject","name":"split","module_id":"Mandrake.Type","id":"split/1","doc":"Returns a function that split a string with the given pattern.\n\n## Examples\n\n    iex>  splitComma = Mandrake.Type.split(\",\")\n    ...>  splitComma.(\"a,b,c\")\n    [\"a\", \"b\", \"c\"]\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1070","signature":[["regex",[],null]],"object_type":"FunctionObject","name":"test","module_id":"Mandrake.Type","id":"test/1","doc":"Returns a function that test the given regex.\n\n## Examples\n\n    iex>  testFoo = Mandrake.Type.test(~r/foo/)\n    ...>  testFoo.(\"bar\")\n    false\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1057","signature":[["regex",[],null],["string",[],null]],"object_type":"FunctionObject","name":"test","module_id":"Mandrake.Type","id":"test/2","doc":"Returns a boolean indicating whether there was a match or not.\n\n## Examples\n\n    iex>  Mandrake.Type.test(~r/foo/, \"foo\")\n    true\n\n","arity":2},{"type":"def","source":"lib/mandrake.ex:1044","signature":[["string",[],null]],"object_type":"FunctionObject","name":"trim","module_id":"Mandrake.Type","id":"trim/1","doc":"Removes whitespace at the beginning and at the end of the string.\n\n## Examples\n\n    iex>  Mandrake.Type.trim(\"   Example   \")\n    \"Example\"\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1113","signature":[["value",[],null]],"object_type":"FunctionObject","name":"truthy","module_id":"Mandrake.Type","id":"truthy/1","doc":"Returns true if value is not nil or false.\n\n## Examples\n\n    iex>  Mandrake.Type.truthy(\"Example\")\n    true\n    iex>  Mandrake.Type.truthy(nil)\n    false\n\n","arity":1},{"type":"def","source":"lib/mandrake.ex:1000","signature":[["value",[],null]],"object_type":"FunctionObject","name":"type_of","module_id":"Mandrake.Type","id":"type_of/1","doc":"Returns type of value.\n\n## Examples\n\n    iex>  Mandrake.Type.type_of(42.0)\n    Float\n\n","arity":1}],"language":"elixir","git_repo_url":"https://github.com/mbasso/mandrake.git","client_version":"0.4.0","client_name":"inch_ex","branch_name":"master","args":[]}